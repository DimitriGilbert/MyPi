#!/bin/bash
# @parseArger-begin
# @parseArger-help "install packages from various sources defined in a config file" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos target "subcommand" --optional --subcommand-directory "bin/_install" --subcommand --one-of "apt" --one-of "docker" --one-of "docker-cmd" --one-of "git" --one-of "omz"
# @parseArger opt config "config file" --default-value "__home__/.config/MyPi"
# @parseArger opt apt "apt package to install" --short a --repeat
# @parseArger opt git "git repo to clone" --short g --repeat
# @parseArger opt git-clone-dir "specify cloning directory, all repo with specific directory must be specify first and index must match with --git" --repeat --alias clone-dir --alias gcd
# @parseArger opt docker "docker command to execute" --short d --repeat
# @parseArger opt mkdir "mkdir duh !" --repeat
# @parseArger opt mkdir-opt "mkdir options" --repeat
# @parseArger opt fstab "add line to fstab" --repeat
# @parseArger opt nfs-export "line to add to /etc/exports" --repeat
# @parseArger opt post-install "post install script path" --repeat
# @parseArger opt omz-plugin "enable omz plugin" --repeat
# @parseArger opt apt-cmd "custom apt command, every option must be specified separatly" --repeat
# @parseArger opt desktop "desktop package to install" --default-value "mate" --alias de
# @parseArger flag apt-install "perform apt install" --on --no-alias no-apt
# @parseArger flag git-install "perform git repos installation" --on
# @parseArger flag install-docker "install docker and docker compose" --on
# @parseArger flag docker-install "perform docker install"
# @parseArger flag install-nfs "install nfs server" --on
# @parseArger flag reboot "reboot when done" --on
# @parseArger flag install-omz "install oh-my-zsh" --on
# @parseArger flag install-desktop "install a desktop environment" --on --no-alias no-desktop --no-alias no-de
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_target="";
_one_of_arg_target=("apt" "docker" "docker-cmd" "git" "omz" );
_arg_subcommand_arg="_arg_target";
__subcommand=();
# OPTIONALS ARGUMENTS
_arg_config="__home__/.config/MyPi"
_arg_apt=()
_arg_git=()
_arg_git_clone_dir=()
_arg_docker=()
_arg_mkdir=()
_arg_mkdir_opt=()
_arg_fstab=()
_arg_nfs_export=()
_arg_post_install=()
_arg_omz_plugin=()
_arg_apt_cmd=()
_arg_desktop="mate"
# FLAGS
_arg_apt_install="on"
_arg_git_install="on"
_arg_install_docker="on"
_arg_docker_install="off"
_arg_install_nfs="on"
_arg_reboot="on"
_arg_install_omz="on"
_arg_install_desktop="on"
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [ "${#_positionals[@]}" -ge 1 ]; then
		echo "$0 sub command help
	"
		_triggerSCHelp=0;
	else
	

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "install packages from various sources defined in a config file:"
	echo -e "	target: subcommand, optional [one of 'apt' 'docker' 'docker-cmd' 'git' 'omz']"
	echo -e "	--config <config>: config file [default: ' __home__/.config/MyPi ']"
	echo -e "	-a, --apt <apt>: apt package to install, repeatable"
	echo -e "	-g, --git <git>: git repo to clone, repeatable"
	echo -e "	--git-clone-dir|--clone-dir|--gcd <git-clone-dir>: specify cloning directory, all repo with specific directory must be specify first and index must match with --git, repeatable"
	echo -e "	-d, --docker <docker>: docker command to execute, repeatable"
	echo -e "	--mkdir <mkdir>: mkdir duh !, repeatable"
	echo -e "	--mkdir-opt <mkdir-opt>: mkdir options, repeatable"
	echo -e "	--fstab <fstab>: add line to fstab, repeatable"
	echo -e "	--nfs-export <nfs-export>: line to add to /etc/exports, repeatable"
	echo -e "	--post-install <post-install>: post install script path, repeatable"
	echo -e "	--omz-plugin <omz-plugin>: enable omz plugin, repeatable"
	echo -e "	--apt-cmd <apt-cmd>: custom apt command, every option must be specified separatly, repeatable"
	echo -e "	--desktop|--de <desktop>: desktop package to install [default: ' mate ']"
	echo -e "	--apt-install|--no-apt-install: perform apt install, on by default (use --no-apt-install to turn it off)
		no-aliases: --no-apt,"
	echo -e "	--git-install|--no-git-install: perform git repos installation, on by default (use --no-git-install to turn it off)"
	echo -e "	--install-docker|--no-install-docker: install docker and docker compose, on by default (use --no-install-docker to turn it off)"
	echo -e "	--docker-install|--no-docker-install: perform docker install"
	echo -e "	--install-nfs|--no-install-nfs: install nfs server, on by default (use --no-install-nfs to turn it off)"
	echo -e "	--reboot|--no-reboot: reboot when done, on by default (use --no-reboot to turn it off)"
	echo -e "	--install-omz|--no-install-omz: install oh-my-zsh, on by default (use --no-install-omz to turn it off)"
	echo -e "	--install-desktop|--no-install-desktop: install a desktop environment, on by default (use --no-install-desktop to turn it off)
		no-aliases: --no-desktop, --no-de,"
	echo -e "Usage :
	$0 [target] [--config <value>] [--apt <value>] [--git <value>] [--git-clone-dir <value>] [--docker <value>] [--mkdir <value>] [--mkdir-opt <value>] [--fstab <value>] [--nfs-export <value>] [--post-install <value>] [--omz-plugin <value>] [--apt-cmd <value>] [--desktop <value>] [--[no-]apt-install] [--[no-]git-install] [--[no-]install-docker] [--[no-]docker-install] [--[no-]install-nfs] [--[no-]reboot] [--[no-]install-omz] [--[no-]install-desktop]";
	fi

	fi
	

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--config)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			
			-a|--apt)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_apt+=("$2")
				shift
				;;
			--apt=*)
				_arg_apt+=("${_key##--apt=}")
				;;
			-a*)
				_arg_apt+=("${_key##-a}")
				;;
			
			-g|--git)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_git+=("$2")
				shift
				;;
			--git=*)
				_arg_git+=("${_key##--git=}")
				;;
			-g*)
				_arg_git+=("${_key##-g}")
				;;
			
			--gcd|--clone-dir|--git-clone-dir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_git_clone_dir+=("$2")
				shift
				;;
			--git-clone-dir=*)
				_arg_git_clone_dir+=("${_key##--git-clone-dir=}")
				;;
			--clone-dir=*)
				_arg_git_clone_dir+=("${_key##--clone-dir=}")
				;;
			--gcd=*)
				_arg_git_clone_dir+=("${_key##--gcd=}")
				;;
			
			-d|--docker)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_docker+=("$2")
				shift
				;;
			--docker=*)
				_arg_docker+=("${_key##--docker=}")
				;;
			-d*)
				_arg_docker+=("${_key##-d}")
				;;
			
			--mkdir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_mkdir+=("$2")
				shift
				;;
			--mkdir=*)
				_arg_mkdir+=("${_key##--mkdir=}")
				;;
			
			--mkdir-opt)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_mkdir_opt+=("$2")
				shift
				;;
			--mkdir-opt=*)
				_arg_mkdir_opt+=("${_key##--mkdir-opt=}")
				;;
			
			--fstab)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_fstab+=("$2")
				shift
				;;
			--fstab=*)
				_arg_fstab+=("${_key##--fstab=}")
				;;
			
			--nfs-export)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_nfs_export+=("$2")
				shift
				;;
			--nfs-export=*)
				_arg_nfs_export+=("${_key##--nfs-export=}")
				;;
			
			--post-install)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_post_install+=("$2")
				shift
				;;
			--post-install=*)
				_arg_post_install+=("${_key##--post-install=}")
				;;
			
			--omz-plugin)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_omz_plugin+=("$2")
				shift
				;;
			--omz-plugin=*)
				_arg_omz_plugin+=("${_key##--omz-plugin=}")
				;;
			
			--apt-cmd)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_apt_cmd+=("$2")
				shift
				;;
			--apt-cmd=*)
				_arg_apt_cmd+=("${_key##--apt-cmd=}")
				;;
			
			--de|--desktop)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_desktop="$2"
				shift
				;;
			--desktop=*)
				_arg_desktop="${_key##--desktop=}"
				;;
			--de=*)
				_arg_desktop="${_key##--de=}"
				;;
			
			--apt-install)
				_arg_apt_install="on"
				;;
			--no-apt-install|--no-apt)
				_arg_apt_install="off"
				;;
			--git-install)
				_arg_git_install="on"
				;;
			--no-git-install)
				_arg_git_install="off"
				;;
			--install-docker)
				_arg_install_docker="on"
				;;
			--no-install-docker)
				_arg_install_docker="off"
				;;
			--docker-install)
				_arg_docker_install="on"
				;;
			--no-docker-install)
				_arg_docker_install="off"
				;;
			--install-nfs)
				_arg_install_nfs="on"
				;;
			--no-install-nfs)
				_arg_install_nfs="off"
				;;
			--reboot)
				_arg_reboot="on"
				;;
			--no-reboot)
				_arg_reboot="off"
				;;
			--install-omz)
				_arg_install_omz="on"
				;;
			--no-install-omz)
				_arg_install_omz="off"
				;;
			--install-desktop)
				_arg_install_desktop="on"
				;;
			--no-install-desktop|--no-desktop|--no-de)
				_arg_install_desktop="off"
				;;
			-h|--help)
				print_help;
				;;
			-h*)
				print_help;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_target ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
			
			if [ "$_arg_subcommand_arg" == "$_positional_name" ];then
				if [ -d "$_SCRIPT_DIR/bin/_install/${1}" ];then
					__subcommand+=("$_SCRIPT_DIR/bin/_install/${1}");
				elif [[ "bin/_install/" == $(basename "$_SCRIPT_DIR")* ]];then
					cmdToSub="$(basename "$_SCRIPT_DIR")";
					cmdsubDir="bin/_install/";
					__subcommand+=("$_SCRIPT_DIR${cmdsubDir#"${cmdToSub}"}${1}");
				else
					__subcommand+=("$_SCRIPT_DIR/bin/_install/${1}");
				fi
			fi
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\ttarget: ${_arg_target}";
	echo -e "\tconfig: ${_arg_config}";
	echo -e "\tapt: ${_arg_apt[*]}";
	echo -e "\tgit: ${_arg_git[*]}";
	echo -e "\tgit-clone-dir: ${_arg_git_clone_dir[*]}";
	echo -e "\tdocker: ${_arg_docker[*]}";
	echo -e "\tmkdir: ${_arg_mkdir[*]}";
	echo -e "\tmkdir-opt: ${_arg_mkdir_opt[*]}";
	echo -e "\tfstab: ${_arg_fstab[*]}";
	echo -e "\tnfs-export: ${_arg_nfs_export[*]}";
	echo -e "\tpost-install: ${_arg_post_install[*]}";
	echo -e "\tomz-plugin: ${_arg_omz_plugin[*]}";
	echo -e "\tapt-cmd: ${_arg_apt_cmd[*]}";
	echo -e "\tdesktop: ${_arg_desktop}";
	echo -e "\tapt-install: ${_arg_apt_install}";
	echo -e "\tgit-install: ${_arg_git_install}";
	echo -e "\tinstall-docker: ${_arg_install_docker}";
	echo -e "\tdocker-install: ${_arg_docker_install}";
	echo -e "\tinstall-nfs: ${_arg_install_nfs}";
	echo -e "\treboot: ${_arg_reboot}";
	echo -e "\tinstall-omz: ${_arg_install_omz}";
	echo -e "\tinstall-desktop: ${_arg_install_desktop}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


if [ "$_triggerSCHelp" == "0" ];then
	__subcommand+=("--help");
fi
if [ "$_verbose_level" -ne "0" ];then
	__subcommand+=("--verbose" "$_verbose_level");
fi

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ -f "$_arg_config" ]; then
	# shellcheck source=../config.dist
	source "$_arg_config";
fi

if [ "$_triggerSCHelp" == "" ]; then
	log "updating apt index" 0;
	sudo apt update -qq;
	sysToUpgrade=$(sudo apt list --upgradable 2>/dev/null | wc -l | tr -d '[:space:]');
	sysToUpgrade=$((sysToUpgrade));
	if [ "$sysToUpgrade" != "0" ]; then
		log "$sysToUpgrade apt package to upgrade" 0;
		sudo apt upgrade -y -qq --progress-bar;
	fi
fi

if [ "$_arg_target" != "" ]; then
	__subcommand+=(--no-install-from-script "${_arg_leftovers[@]}");
	"${__subcommand[@]}";
else
	if [ "$_triggerSCHelp" == "1" ]; then
		print_help;
		exit 0;
	else
		# mkdir
		if [ "${#_arg_mkdir[@]}" -gt 0 ]; then
			log "${#_arg_mkdir[@]} mkdir from cli" 1;
			mkcmd=(mkdir -p);
			if [ "${#_arg_mkdir_opt[@]}" -gt 0 ]; then
				log "${#_arg_mkdir_opt[@]} mkdir options from cli" 1;
				mkcmd+=("${_arg_mkdir_opt[@]}");
			fi
			for mdi in "${_arg_mkdir[@]}"; do
				[ ! -d "$mdi" ] && "${mkcmd[@]}" "$mdi";
			done
		fi

		# apt
		if [ "$_arg_apt_install" == "on" ]; then
			# if [ "${#_arg_apt_cmd[@]}" -gt 0 ]; then
			# 	log "custom apt command:\n\t${_arg_apt_cmd[*]}" 1;
			# 	aptCmd=("${_arg_apt_cmd[@]}" "git");
			# else
			# 	aptCmd=("sudo" "apt" "install" "-y");
			# 	_arg_apt_cmd=("${aptCmd[@]}" "git");
			# fi

			# if [ "${#_arg_apt[@]}" -gt 0 ]; then
			# 	log "${#_arg_apt[@]} apt packages from cli" 1;
			# 	log "${_arg_apt[*]}" 2;
			# 	aptCmd+=("${_arg_apt[@]}");
			# fi
			# if [ "${#MyPi_apt_pkg[@]}" -gt 0 ]; then
			# 	log "${#MyPi_apt_pkg[@]} apt packages from config" 1;
			# 	log "${MyPi_apt_pkg[*]}" 2;
			# 	aptCmd+=("${MyPi_apt_pkg[@]}");
			# fi

			# # desktop
			# if [ "$_arg_install_desktop" == "on" ]; then
			# 	aptCmd+=(xserver-xorg lightdm);
			# 	case "$_arg_desktop" in
			# 		pixel|raspbian)
			# 			aptCmd+=(raspberrypi-ui-mods);
			# 			;;
			# 		kde)
			# 			aptCmd+=(kde-plasma-desktop);
			# 			;;
			# 		lxde)
			# 			aptCmd+=(lxde-core lxappearance);
			# 			;;
			# 		xfce4)
			# 			aptCmd+=(xfce4 xfce4-terminal);
			# 			;;
			# 		cinnamon)
			# 			aptCmd+=(cinnamon-desktop-environment);
			# 			;;
			# 		mate)
			# 			aptCmd+=(mate-desktop-environment);
			# 			;;
			# 		*)
			# 			aptCmd+=(mate-desktop-environment);
			# 			;;
			# 	esac
			# fi

			# # oh my zsh dependency
			# if [ "$_arg_install_omz" == "on" ]; then
			# 	aptCmd+=(zsh);
			# fi

			# # nfs dependency
			# if [ "$_arg_install_nfs" == "on" ] || [ "${#_arg_nfs_export[@]}" -gt 0 ]; then
			# 	aptCmd+=(nfs-common nfs-kernel-server);
			# fi

			# if [ "${aptCmd[*]}" !=  "${_arg_apt_cmd[*]}" ]; then
			# 	"${aptCmd[@]}";
			# else 
			# 	log "no apt packages to install" 2;
			# fi
			aptCmd=("$_SCRIPT_DIR/apt" --config "$_arg_config" --verbose "$_verbose_level");
			if [ "${#_arg_apt[@]}" -gt 0 ]; then
				aptCmd+=(-p "${_arg_apt[@]}");
			fi

			# desktop
			if [ "$_arg_install_desktop" == "on" ]; then
				aptCmd+=(xserver-xorg lightdm);
				case "$_arg_desktop" in
					pixel|raspbian)
						aptCmd+=(-p raspberrypi-ui-mods);
						;;
					kde)
						aptCmd+=(-p kde-plasma-desktop);
						;;
					lxde)
						aptCmd+=(-p lxde-core -p lxappearance);
						;;
					xfce4)
						aptCmd+=(-p xfce4 -p xfce4-terminal);
						;;
					cinnamon)
						aptCmd+=(-p cinnamon-desktop-environment);
						;;
					mate)
						aptCmd+=(-p mate-desktop-environment);
						;;
					*)
						aptCmd+=(-p mate-desktop-environment);
						;;
				esac
			fi

			# oh my zsh dependency
			if [ "$_arg_install_omz" == "on" ]; then
				aptCmd+=(-p zsh);
			fi

			# nfs dependency
			if [ "$_arg_install_nfs" == "on" ] || [ "${#_arg_nfs_export[@]}" -gt 0 ]; then
				aptCmd+=(-p nfs-common -p nfs-kernel-server);
			fi

			"${aptCmd[@]}";
		fi

		# git
		if [ "$_arg_git_install" == "on" ]; then
			# gitCmd=(git clone);
			# if [ "${#_arg_git[@]}" -gt 0 ]; then
			# 	log "${#_arg_git[@]} git repos from cli" 2;
			# 	for((i=0;i<${#_arg_git[@]};i++)); do
			# 		log "cloning ${_arg_git[$i]}" 1;
			# 		tgitCmd=("${gitCmd[@]}" "${_arg_git[$i]}");
			# 		if [ "${#_arg_git_clone_dir[@]}" -ge "$i" ]; then
			# 			log "\tin ${_arg_git_clone_dir[$i]}" 1;
			# 			tgitCmd+=("${_arg_git_clone_dir[$i]}");
			# 		fi
			# 		"${tgitCmd[@]}";
			# 	done
			# fi
			# if [ "${#MyPi_git_repo[@]}" -gt 0 ]; then
			# 	log "${#MyPi_git_repo[@]} git repos from config" 1;
			# 	for((i=0;i<${#MyPi_git_repo[@]};i++)); do
			# 		log "cloning ${MyPi_git_repo[$i]}" 1;
			# 		tgitCmd=("${gitCmd[@]}" "${MyPi_git_repo[$i]}");
			# 		if [ "${#MyPi_git_clone_dir[@]}" -ge "$i" ]; then
			# 			log "\tin ${MyPi_git_clone_dir[$i]}" 1;
			# 			tgitCmd+=("${MyPi_git_clone_dir[$i]}");
			# 		fi
			# 		"${tgitCmd[@]}";
			# 	done
			# fi
			gitCmd=("$_SCRIPT_DIR/git" --config "$_arg_config" --verbose "$_verbose_level");
			if [ "${#_arg_git[@]}" -gt 0 ]; then
				gitCmd+=(-r "${_arg_git[@]}");
			fi
			"${gitCmd[@]}";
		fi

		# docker
		if [ "$_arg_install_docker" == "on" ]; then
			# log "installing docker" 1;
			# curl -sSL https://get.docker.com | sh;
			# sudo usermod -aG docker "$USER";
			# sudo apt install docker-compose -y;
			"$_SCRIPT_DIR/_install/docker" --config "$_arg_config" --verbose "$_verbose_level";

			if [ "$_arg_docker_install" == "on" ];then
				# if [ "${#_arg_docker[@]}" -gt 0 ]; then
				# 	log "${#_arg_docker[@]} docker commands from cli" 1;
				# 	for dck in "${_arg_docker[@]}"; do
				# 		log "executing:\n\tdocker $dck" 1;
				# 		eval "docker $dck;";
				# 	done
				# fi
				# if [ "${#MyPi_docker_cmd[@]}" -gt 0 ]; then
				# 	log "${#MyPi_docker_cmd[@]} docker commands from config" 1;
				# 	for dck in "${MyPi_docker_cmd[@]}"; do
				# 		log "executing:\n\tdocker $dck" 1;
				# 		eval "docker $dck;";
				# 	done
				# fi
				dockerCmd=("$_SCRIPT_DIR/docker" --config "$_arg_config" --verbose "$_verbose_level");
				if [ "${#_arg_docker[@]}" -gt 0 ]; then
					dockerCmd+=(-c "${_arg_docker[@]}");
				fi
				"${dockerCmd[@]}";
			fi
		fi

		# nfs export
		if [ "$_arg_install_nfs" == "on" ]; then
			# if [ "${#_arg_nfs_export[@]}" -gt 0 ]; then
			# 	log "${#_arg_nfs_export[@]} nfs exports from cli" 1;
			# 	for nfs in "${_arg_nfs_export[@]}"; do
			# 		echo "$nfs" | sudo tee -a /etc/exports;
			# 	done
			# fi
			# if [ "${#MyPi_nfs_export[@]}" -gt 0 ]; then
			# 	log "${#MyPi_nfs_export[@]} nfs exports from config" 1;
			# 	for nfs in "${MyPi_nfs_export[@]}"; do
			# 		echo "$nfs" | sudo tee -a /etc/exports;
			# 	done
			# fi
			nfsCmd=("$_SCRIPT_DIR/nfs-export" --config "$_arg_config" --verbose "$_verbose_level");
			if [ "${#_arg_nfs_export[@]}" -gt 0 ]; then
				log "${#_arg_nfs_export[@]} nfs exports from cli" 1;
				for nfs in "${_arg_nfs_export[@]}"; do
					nfsCmd+=(-e "$nfs");
				done
			fi
			if [ "${#MyPi_nfs_export[@]}" -gt 0 ]; then
				log "${#MyPi_nfs_export[@]} nfs exports from config" 1;
				for nfs in "${MyPi_nfs_export[@]}"; do
					nfsCmd+=(-e "$nfs");
				done
			fi
		fi

		# fstab
		fstentry=()
		if [ "${#_arg_fstab[@]}" -gt 0 ]; then
			log "${#_arg_fstab[@]} fstab lines from cli" 1;
			for fst in "${_arg_fstab[@]}"; do
				# echo "$fst" | sudo tee -a /etc/fstab;
				fstentry+=(-l "$fst");
			done
		fi
		if [ "${#MyPi_fstab[@]}" -gt 0 ]; then
			log "${#MyPi_fstab[@]} fstab lines from config" 1;
			for fst in "${MyPi_fstab[@]}"; do
				# echo "$fst" | sudo tee -a /etc/fstab;
				fstentry+=(-l "$fst");
			done
		fi
		if [ "${#fstentry[@]}" -gt 0 ]; then
			fstabCmd=("$_SCRIPT_DIR/add-fstab" --config "$_arg_config" --verbose "$_verbose_level" "${fstentry[@]}");
			"${fstabCmd[@]}";
		fi

		# omz 
		if [ "$_arg_install_omz" == "on" ]; then
			# log "installing oh my zsh" 1;
			# RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)";
			# if [ "${#_arg_omz_plugin[@]}" -gt 0 ]; then
			# 	log "${#_arg_omz_plugin[@]} omz plugins from cli" 1;
			# 	for omzp in "${_arg_omz_plugin[@]}"; do
			# 		log "enabling $omzp" 1;
			# 		sed -i "s/plugins=(git)/plugins=(git $omzp)/g" ~/.zshrc;
			# 	done
			# fi
			omzCmd=("$_SCRIPT_DIR/_install/omz" --config "$_arg_config" --verbose "$_verbose_level");
			if [ "${#_arg_omz_plugin[@]}" -gt 0 ]; then
				omzCmd+=(-p "${_arg_omz_plugin[@]}");
			fi
			"${omzCmd[@]}";
		fi

		# post install
		if [ "${#_arg_post_install[@]}" -gt 0 ]; then
			log "${#_arg_post_install[@]} post install scripts from cli" 1;
			for pi in "${_arg_post_install[@]}"; do
				if [ "$(command -v "$pi")" ]; then
					log "executing $pi" 1;
					"$pi";
				fi			
			done
		fi
		if [ "${#MyPi_post_install[@]}" -gt 0 ]; then
			log "${#MyPi_post_install[@]} post install scripts from config" 1;
			for pi in "${MyPi_post_install[@]}"; do
				if [ "$(command -v "$pi")" ]; then
					log "executing $pi" 1;
					"$pi";
				fi			
			done
		fi
	fi
fi
