#!/bin/bash
# @parseArger-begin
# @parseArger-help "install using git" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger opt repo "repo url" --short r --repeat
# @parseArger opt directory "clone to" --short d
# @parseArger opt config "config file path" --default-value "__home__/.config/MyPi"
# @parseArger flag use-config "use a config file" --on --no-alias no-config
# @parseArger flag install-from-config "install from config" --on
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_repo=()
_arg_directory=
_arg_config="__home__/.config/MyPi"
# FLAGS
_arg_use_config="on"
_arg_install_from_config="on"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "install using git:"
	echo -e "	-r, --repo <repo>: repo url, repeatable"
	echo -e "	-d, --directory <directory>: clone to"
	echo -e "	--config <config>: config file path [default: ' __home__/.config/MyPi ']"
	echo -e "	--use-config|--no-use-config: use a config file, on by default (use --no-use-config to turn it off)
		no-aliases: --no-config,"
	echo -e "	--install-from-config|--no-install-from-config: install from config, on by default (use --no-install-from-config to turn it off)"
	echo -e "Usage :
	$0 [--repo <value>] [--directory <value>] [--config <value>] [--[no-]use-config] [--[no-]install-from-config]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-r|--repo)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_repo+=("$2")
				shift
				;;
			--repo=*)
				_arg_repo+=("${_key##--repo=}")
				;;
			-r*)
				_arg_repo+=("${_key##-r}")
				;;
			
			-d|--directory)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_directory="$2"
				shift
				;;
			--directory=*)
				_arg_directory="${_key##--directory=}"
				;;
			-d*)
				_arg_directory="${_key##-d}"
				;;
			
			--config)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			
			--use-config)
				_arg_use_config="on"
				;;
			--no-use-config|--no-config)
				_arg_use_config="off"
				;;
			--install-from-config)
				_arg_install_from_config="on"
				;;
			--no-install-from-config)
				_arg_install_from_config="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\trepo: ${_arg_repo[*]}";
	echo -e "\tdirectory: ${_arg_directory}";
	echo -e "\tconfig: ${_arg_config}";
	echo -e "\tuse-config: ${_arg_use_config}";
	echo -e "\tinstall-from-config: ${_arg_install_from_config}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ "$_arg_use_config" != "off" ] && [ -f "$_arg_config" ]; then
	# shellcheck source=../../config.dist
	source "$_arg_config";
fi

gitCmd=(git clone);
if [ "$_arg_install_from_config" != "off" ] && [ "$_arg_use_config" != "off" ] && [ "${#MyPi_git_repo[@]}" -gt 0 ]; then
	log "${#MyPi_git_repo[@]} git repos from config" 1;
	for((i=0;i<${#MyPi_git_repo[@]};i++)); do
		log "cloning ${MyPi_git_repo[$i]}" 1;
		tgitCmd=("${gitCmd[@]}" "${MyPi_git_repo[$i]}");
		if [ "${#MyPi_git_clone_dir[@]}" -ge "$i" ]; then
			log "\tin ${MyPi_git_clone_dir[$i]}" 1;
			tgitCmd+=("${MyPi_git_clone_dir[$i]}");
		fi
		"${tgitCmd[@]}";
	done
fi
if [ "${#_arg_repo[@]}" -gt 0 ]; then
	log "${#_arg_repo[@]} git repos from cli" 2;
	for((i=0;i<${#_arg_repo[@]};i++)); do
		log "cloning ${_arg_repo[$i]}" 1;
		tgitCmd=("${gitCmd[@]}" "${_arg_repo[$i]}");
		MyPi_git_repo+=("${_arg_repo[$i]}");
		if [ "${#_arg_directory[@]}" -ge "$i" ]; then
			log "\tin ${_arg_directory[$i]}" 1;
			tgitCmd+=("${_arg_directory[$i]}");
			MyPi_git_clone_dir+=("${_arg_directory[$i]}");
		else
			MyPi_git_clone_dir+=("$(pwd)/$(basename "$git_url" .git)");
		fi
		"${tgitCmd[@]}";
	done
fi
	
if [ "$_arg_use_config" != "off" ] && [ -f "$_arg_config" ]; then
	sed -i "s/MyPi_git_repo=.*/MyPi_git_repo=(${MyPi_git_repo[*]})/" "$_arg_config"
	sed -i "s/MyPi_git_clone_dir=.*/MyPi_git_clone_dir=(${MyPi_git_clone_dir[*]})/" "$_arg_config"
fi
