#!/bin/bash
# @parseArger-begin
# @parseArger-help "install using apt" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger opt cmd "apt command" --repeat
# @parseArger opt package "package to install" --short p --repeat
# @parseArger opt config "config file path" --default-value "__home__/.config/MyPi"
# @parseArger flag use-config "use a config file" --on --no-alias no-config
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_cmd=()
_arg_package=()
_arg_config="__home__/.config/MyPi"
# FLAGS
_arg_use_config="on"
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "install using apt:"
	echo -e "	--cmd <cmd>: apt command, repeatable"
	echo -e "	-p, --package <package>: package to install, repeatable"
	echo -e "	--config <config>: config file path [default: ' __home__/.config/MyPi ']"
	echo -e "	--use-config|--no-use-config: use a config file, on by default (use --no-use-config to turn it off)
		no-aliases: --no-config,"
	echo -e "Usage :
	$0 [--cmd <value>] [--package <value>] [--config <value>] [--[no-]use-config]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="[0;31m";
				;;
			-2)
				_arg_COLOR="[0;33m";
				;;
			-1)
				_arg_COLOR="[1;33m";
				;;
			1)
				_arg_COLOR="[0;32m";
				;;
			2)
				_arg_COLOR="[1;36m";
				;;
			3)
				_arg_COLOR="[0;36m";
				;;
			*)
				_arg_COLOR="[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--cmd)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_cmd+=("$2")
				shift
				;;
			--cmd=*)
				_arg_cmd+=("${_key##--cmd=}")
				;;
			
			-p|--package)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_package+=("$2")
				shift
				;;
			--package=*)
				_arg_package+=("${_key##--package=}")
				;;
			-p*)
				_arg_package+=("${_key##-p}")
				;;
			
			--config)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			
			--use-config)
				_arg_use_config="on"
				;;
			--no-use-config|--no-config)
				_arg_use_config="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').
	${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	cmd: ${_arg_cmd[*]}";
	echo -e "	package: ${_arg_package[*]}";
	echo -e "	config: ${_arg_config}";
	echo -e "	use-config: ${_arg_use_config}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ "$_arg_use_config" != "off" ] && [ -f "$_arg_config" ]; then
	# shellcheck source=../../config.dist
	source "$_arg_config";
fi

if [ "${#_arg_cmd[@]}" -gt 0 ]; then
	log "custom apt command:\n\t${_arg_cmd[*]}" 1;
	aptCmd=("${_arg_cmd[@]}" "git");
else
	aptCmd=("sudo" "apt" "install" "-y" "-qq" "--progress-bar");
	_arg_cmd=("${aptCmd[@]}" "git");
fi

if [ "${#MyPi_apt_pkg[@]}" -gt 0 ]; then
	log "${#MyPi_apt_pkg[@]} apt packages from config" 1;
	log "${MyPi_apt_pkg[*]}" 2;
	aptCmd+=("${MyPi_apt_pkg[@]}");
fi
if [ "${#_arg_package[@]}" -gt 0 ]; then
	log "${#_arg_package[@]} apt packages from cli" 1;
	log "${_arg_package[*]}" 2;
	aptCmd+=("${_arg_package[@]}");
	
	if [ "$_arg_use_config" != "off" ] && [ -f "$_arg_config" ]; then
		# updating config
		for pkg in "${_arg_package[@]}"; do
			if ! echo " ${MyPi_apt_pkg[*]} " | grep -q " $pkg "; then
				MyPi_apt_pkg+=("${pkg}");
			fi
		done
		sed -i "s/MyPi_apt_pkg=.*/MyPi_apt_pkg=(${MyPi_apt_pkg[*]})/" "$_arg_config"
	fi
fi

if [ "${aptCmd[*]}" !=  "${_arg_cmd[*]}" ]; then
	"${aptCmd[@]}";
else 
	log "no apt packages to install" 2;
fi